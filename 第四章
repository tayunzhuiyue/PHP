4.1 静态方法和属性
  在面向对象的开发中，大多数情况下我们都把类当做生成对象的模板，把对象当做一种活动组件进行使用。通过对象可以调用方法可以访问属性。但是我们也可以同类本身来访问它具有的属性和方法，这种属性和方法是“静态的”，我们需要通过static关键字声明：
  class staticClass{
    static public $staticVar = 0;
    static public function staticFun(){
      echo "hello world";
    }
  }
  调用：staticClass::$staticVar;
        staticClass::staticFun();
  对于一个子类来说如果需要访问父类的静态成员可以直接使用parent::这种形式。

  那么重要的问题来了：
     1：为什么要使用静态成员呢，使用他们的优势是什么：
        这些静态成员跟对象无关，只跟类有关，因此不需要this指针。好处是可以实现默写特殊的设计模式，封装一些算法，由于没有this指针，可以把某些系统API的回调函数以静态函数的形式封装到类的内部。因为系统API的回调函数通常都是那种非成员函数（孤立函数），没有this指针的。比如你可以在类的内部写一个线程函数供CreateThread创建线程用，如果没有静态函数，那么这种回调函数就必须定义成 全局函数（非静态成员函数指针无法转换成全局函数指针），从而影响了OO的“封装性”。
     2：什么时候使用静态成员：
        简单来说一切不需要实例化就可以确定行为的函数都可以设计成静态成员，当然也要根据实际开发项目的需要。但是必须记住的是静态成员只能被类调用，静态函数里面不能存在非静态的成员。


4.2 常量属性（类常量）
  常量已经定义就不能在进行改变，他们是公共的，可静态访问的。而且常量只能包含一些基本的数据类型，不能将一个对象指派给常量。
  定义常量：const AVAILABLE = 0;
            product::AVAILABLE; 


4.3 抽象类
   定义：
        abstract class shopProductWrite(){
             protected $product = array();

             abstract public function write();
        }

        class textShopProductWrite extends{
             public function write(){
               echo 123;
             }
        }
   抽象类的优势：既然是抽象类的优势当然就是相对普通类来说的。首先抽象类不能实例化，而且不能实现其抽象方法。比如在有些情况下，我们需要抽离出一个父类，但是这个父类的某些方法又不知道如何实现，此时定义一个抽象类是非常合适。如果定义一个普通类我们在父类里实现的方法江北子类覆盖，这样实现这些方法的意义也不是很大。
   
   注意事项：抽象类至少抱一个抽象方法，子类里必须实现父类的所有抽象方法，子类实现的方法的访问控制不能大于父类的访问控制(public>protected>private)。

4.4 接口
   定义：
      interface chargeable{
        public function getPrice();
      }
      interface bookable{
        public function getPrice();
      }    
       
      class textShopProductWrite extends  shopProductWrite implements chargeable,bookable{

      }

    接口的优势： 
    
4.5 延迟静态绑定：static关键字 
   example: 
    abstract class DomainObject{
         private $group;
         public function __construct(){
            $this->group = static::getGroup();
         }

         public static function create(){
           return new static();
         }

         static function getGroup(){
            return "default";
         }
    } 
    
    class User extends DomainObject{

    }

    class Document extends DomainObject{
        static function getGroup(){
           return "document";
        }
    }

    class SpreadSheet extends Document{

    }

    print_r(User::creat());
    print_r(SpreadSheet::create());

  上面的列子在php5.3之前是很难解决的一个问题，之前使用静态方法作为工厂方法时：
      class a{
        public static function create(){
          return new self();
        }
      }

      class b extends a{

      }

  print_r(b::creat()); 输出结果：a Object ( ) ;
  这里产生的问题就是如果一个类继承了此类，然后想用此方法生成一个本类的对象就会出现问题。这里的self被解析为定义create()的类，而不是调用cretate()的类。而新的关键字static则很好的解决了这一问题。不仅如此static还可以像parent和self一样作为调用静态方法的标识符。


4.6 错误处理
  php的错误处理机制更多的是利用内置的Exception类进行处理，对于一些特殊需求的开发人员来说可能会通过继承Exception类去开发更加有利于处理程序错误的专一类。其中Exception类内置的几个重要的方法如下：
  getMessage()  获得传递给构造方法的字符串
  getCode()     获得传递给构造方法的错误代码
  getFile()     获得产生错误的文件
  getLine()     获得生成异常的行号
  getPrevious() 获得一个嵌套的异常对象
  getTrace()    获得一个多维数组，此数组记录产生错误的方法、类、文件和参数数据
  getTraceAsString() 将getTrace()获得的值转化成字符串
  __toString()       返回一个描述异常细节的字符串

  example：class XmlException extends Exception{//具体扩展细节不详细展出，开发时可根据项目需求就行扩展}
           class FileException extends Exception{}
           class ConfException extends Exception{}

           class A {
             public function init(){
                try{
                    //业务代码省略
                }catch(XmlException $e){
                    //捕获到错误之后可进行处理 throw $e,retrun,
                }catch(FileException $e){
                
                }catch(ConfException $e){
                
                }catch(Exception $e){
                
                }
             }
           }

4.7 Final类和Final方法
  关于final关键字用的地方确实不多，对于面向对象编程来说使用final会大大降低代码的灵活性，但是在某些特殊情况下，如果确定没写类确实不让继承某些方法确实不允许重写，还是可以使用final的，但是我们使用时还是尽量谨慎些。

4.8 拦截器  
  php的拦截器大概有这么几个：
    __get($property)           访问未定义的属性时调用
    __set($property,$value)    给未定义的属性赋值时调用
    __isset($property)         给未定义的属性调用isset()方法时调用
    __unset($property)         给未定义的属性调用unset()时调用
    __call($method,array args) 调用未定义的方法时调用

  在进行错误处理时有了拦截器我们可以很好的处理这些错误，或者给客户端程序员很清晰的提示信息。
  委托：一个对象转发或委托一个请求给另外一个对象，被委托的对象替原来的对象处理请求。
  优势：能够很方便的实现显示业务，用少量的代码完成功能需求。
  使用__call()方法能很方便的委托，但是整个程序框架来说，大量使用委托对于别人理解你的程序将会是一个难题，委托的使用将请求在不同的类中跳来跳去，造成业务逻辑的不清晰，不易理解，所以当我们要使用委托时一定慎重，而且一定要写明注释。

4.9 析构方法
   __destruct()与__construct()方法对应，当一个对象从内存中删除时，它将会被调用。

4.10 __clone()
   php5之后所有的对象复制都是采用引用复制，即多个对象同时指向一个对象。但是在实际的开发中我们可能希望采用值方式的复制方式。
   $obj2 = clone $obj1; 这样就是实现了值方式的复制效果
   当我们使用clone关键字进行复制对象时，会自动调用__clone()方法。我们可以在__clone()中对对象做一些必要的处理。
   explame:
	  class Account{
	  	public $balance;
	  	function __construct($balance){
	      $this->balance = $balance;
	  	}

	  }
	  class Person{
	  	private $name;
	  	private $age;
	  	private $id;
	  	public $account;

	  	function __construct($name,$age,Account $account){
	  		$this->name = $name;
	  		$this->age = $age;
	  		$this->account = $account;
	  	}

	  	function setId($id){
	  		$this->id = $id;
	  	}

	  	function __clone(){
	  		$this->id = 0;
	  		$this->account = clone $this->account;
	  	}
	  }

	  $person = new Person('bob',44,new Account(233));
	  $person->setId(255);
	  $person2 = clone $person;

	  $person->account->balance += 10;

	  var_dump($person);
	  echo "<br>";
	  var_dump($person2); 

4.11 定义对象的字符串值。__toString();
    当把对象传递给print或echo时会自动调用这个方法。
    对于日志或错误报告来说__toString将非常有用。也可以设计为专门传递消息的类。

4.12 回调、匿名函数、闭包
    匿名函数定义和使用：$fun = function(){ echo  '123'; }; $fun();    
    上面只是它的简单使用，匿名函数更多的用处是在回调中使用。
    example: 
      class product{
          public $name;
          public $price;
          public function __construct($name,$price){
               $this->name = $name;
               $this->price = $price;
          }
      }

      class process {
          private $callbacks;

          public function setCallBack($callback){
             if(!is_callable($callback)){
                throw new Exception ('callback not callable');
             }
             $this->callbacks[] = $callback;
          }

          public function sale($product){
             foreach($this->callbacks as $val){
                 call_user_func($val,$product);
             }
          }
      }

      $log = function ($product){
	  	print " loging $product->name : $product->price \n";
	  };

	  $process = new process();
	  $process->setCallBack($log);
	  $process->sale(new product('shoes',10));

	is_callable() 检测传递的值是否可以作为回调函数的参数使用。
	上面的匿名函数是用内链方式使用function关键字构成的，除此之外匿名函数还可以使用对象的引用和方法。
	(1):class a {
          public function b ($profuct){
             print "loging $product->name : $product->price \n";
          }
	    } 
	    $process = new process();
	    $process->setCallBack(array(new a(),'b'));
	(2):class a {
	      public static function b(){
             return function ($product){
               print " loging $prduct->name:$product->price\n";
             };
	      }
	    }
	    $process = new process();
	    $process->setCallBack(a::b());  

	对于匿名函数来说还有一个特性，他可以继承父作用域的变量。（父作用域：定义匿名函数的函数）  
	    class a {
	      public static function b($amt){
	         $count = 0;
             return function ($product) use ($amt,&$count){
               $count += $product->price;
               print " loging $prduct->name:$product->price\n";
               if($count > $amt){
                 print "high price $count";
               }
             };
	      }
	    }  

