5.1 php包和命名空间，自动加载
  包的概念：
       包的概念其实就是很多个类的一个集合，就好比我们某一个目录，这个目录可能包含很多的.php文件，只不过一般来说同一个包下面的类库都具有相同的或相似的特性。（自我感觉就是归类，方面使用，方面阅读）
       当我们开发大型应用程序的时候，我们可能会建立很多的类，也可能会引用到第三方的类库包。那么可能就会出现类名重复的问题！
       ex://my.php
          require_once 'userful/a.php';
          class output{}

          //userful a.php
          class output{}

          //error notice
          Fatal error: Cannot redeclare class output in E:\wnmp\www\localhost\demon-php\test\a.php on line 2

        从php5.3开始，php出现了命名空间的概念，这个特性很好的解决了上面我们出现的问题。
  命名空间概念：命名空间就是一个容器，你可以将类，函数，变量放在其中。
        ex: namespace my;
            require_once 'userful/output.php';
            class output{}

            namespace userful;
            class output{}

        嵌套命名空间： namespace com\getinstance\util;
                       class a{
                        static public function b{
                           echo 'a class';
                         }
                       } 

        在命名空间内部使用该类可直接调用：a::b();
        如果需要在外部引用该类，需要使用全称。
        //my.php
        namespace my;
        class c{
          function d{
            //错误的调用方式
            com\getinstance\util\a::b();//这种使用相对命名空间的方式将会导致查找不到a类，相对路径的方式会从my空间开始寻找com\getinstance\util\a

            \com\getinstance\util\a::b() // 正确的调用方式，加一'/'，采用绝对路径，从全局开始寻找com\getinstance\util\a
          }
        }
        这个地方不得不说一下，刚开始我使用tp5的时候由于对概念不清晰出现的一个小bug：
        namespace app\console\controller;
        class b extends think\Controller{}
        报错之后自己还是很疑惑这怎么可能，然后看公司其他人的代码class b extends \think\Controller{}然后也没多想，就直接改成一样bug就解决了，当时也没仔细想这个问题，现在突然发现工作中的任何一个bug都是自己没有掌握的一个知识点，看来以后还是要多用点心呀。
  use关键字：
        回到上面调用的方式(\com\getinstance\util\a::b())冗长的调用方式并没有比以前得到改善,使用use关键字可以为引入的命名空间起别名，use \com\getinstance\util as alias 如果没有显式的使用别名，默认会是util例如下面的列子。
        namespace my;
        use \com\getinstance\util;
        util\b::a();

        这里如果在my空间也出现b类呢？会出现什么情况
        namespace my;
        use \com\getinstance\util;
        class b{

        }
        Fatal error: Cannot redeclare class b in E:\wnmp\www\localhost\demon-php\test\my.php on line 2
        貌似又回到最初的起点了，这里解决的办法是显式起别名。
        namespace my;
        use \com\getinstance\util\b as utilB;
        class b{
           public function a{
              utilB::a();
           }
        }
  全局命名空间：
    对于一些全局空间的php文件可以加上'\'区分和普通的命名空间.(这里还是有个疑问为什么这两个类能共存)
    //conmmon.php
    class a{
      public function b{}
    }

    namespace demon;
    require 'common.php';
    class a{
      public function b{}
    }

    a::b();//某命名空间下的类
    \a::b()//全局类
  同一文件使用多个命名空间：
  namespace a{
    class c {
      public function a{

      }
    }
  }
  namespace b{
    class b {
      public function a{

      }
    }
  }
  //全局命名空间
  namespace {
    class b {
      public function a{

      }
    }  
  }

  \b::a();
  b::a();

文件系统模拟包：
  无论哪种版本的php，我们都可以使用文件目录结构的形式类组织我们的类，然后使用require/require_once/include/include_once来加载包。
  四种加载方式的区别，require开头的语句相对来说更加安全，当加载出现问题时会停止整个程序，而include则会生成一个警告然后跳过加载文件的过程，继续执行下面的程序。以_once结尾的语句则表示如果此文件加载过了便不再继续加载，这样会更多的消耗系统的资源。选择哪种加载方式还是要根据自己的需求来定。  
PEAR包：
  pear只是一种命名风格，简单点它的包命名方式就是 目录_子目录_下级目录_类名，通过这我们根据类名可以很好的找到这个类所在的位置。
包含路径:
   这里我学到的感觉也就是在php.ini中可以配置包的路径，把包的目录位置配置作为include_path的值。
自动加载：
   自动加载应该是每一个框架都必须设计的内容了，其最基本就是php的__autoload()拦截器，或者spl_autoload_register(),不过个人感觉使用或者的更多一些。至于在注册函数中如何实现自动加载的机制，每种框架再设计的目录结构上的不同可能要有所改变，基本的原理就是找到这个文件然后require进来，至于一些牛逼的框架会在这里做上许多的优化，以提升框架的访问速度和性能，只能说多看几个框架源码就知道了，经验这种东西没办法，慢慢积累喽！

5.2类函数和对象函数
   这类函数更多的是用在验证方面来避免一些可能存在的风险。php5之后反射api的出现替代了一些类函数的作用但是这类函数使用方便在有些时候成为我们的首要选择，下面是书中介绍的一些常用的类函数，更多的类函数可能需要查看手册。
   class_exists() 接受一个字符串参数，判断该字符串对应的类是否存在，
   get_declared_classes() 获得脚本进程中所有累的数组。
   get_class() 接收对象作为参数，返回对象的类名
   instanceof 操作符，判断一个对象是否属于该类的家族实例 obj instanceof class
   get_class_method() 接收字符串作为类名返回该类拥有的方法
   is_callable($obj/$class,$method);判断该类是否存在方法    
   method_exists($obj/$class,$method);
   get_class_vars()以类名参数返回该类的所有属性
   get_parent_class()返回该类的父类
   is_subclass_class($obj,$class) 判断该对象是否属于此类的家族，感觉跟instanceof没有太大区别
   class_implements($class/$obj) 返回所有的接口
   call_user_func(array($obj,$method))动态调用方法  最终结果类似$obj->$menthod();

<疑惑点> call_user_func_array(array($obj,$method),$args) 可以携带所有的参数进行调用，这里提到比call_user_func()  方法的优势是能够传递一个独立的参数，可是个人还是不确定怎么个情况。


5.3 反射api
    看完反射api的简单介绍和演示，感觉是比普通的类或对象判断要高级很多，特别是能直接获取源码的功能简直吊炸天，可细想一下，这个功能真的有用吗？你怎么加载别人的代码文件，访问别人的api无非通过别人定好的方式来写，在实际项目中没有必要也不太现实去获取别人的源代码。好了还是安心回顾一下主要讲些什么吧！
    首先ReflectionClass是php内置的类，简单使用,下面调用方法时相应的对象名我省略不写。

    $pro_class = new ReflectionClass('$className');
    然后就可以使用此类的方法进行验证，
    get_name()获取类名；
    isUserDefined()是否定义
    isInternal() 是否是内置类
    isInternal() 是否是接口
    isAbstract()  是否是抽象类
    isFinal()是否可以被继承
    isInstantiable()是否可以得到类实例

    检查方法
    $methods = $pro_class->getMethods();
    foeach($methods as $method){
        get_name()
        isUserDefined()
        isInternal()
        isAbstract()
        isPublic()
        isProtected()
        isPrivate()
        isStatic()
        inFinal()
        isConstructor()
        returnReference()方法返回引用
    } 
    检查方法参数
    $methods = $pro_class->getMethods();
    foeach($methods as $method){
        $args = $method->getParameters();
        foreach($args as $param){
          getName()
          getClass()
          getPosition()
          isPassedByReference()//是否为引用
          isDefaultValueAvailable()是否有默认值
          getDefaultValue();
        }
    }